suite: Internal Service configuration
templates:
  - service-internal.yaml
tests:
  - it: should not provide an internal service by default
    asserts:
      - hasDocuments:
          count: 0
  - it: should be possible to configure an internal LoadBalancer Service
    set:
      service:
        internal:
          type: LoadBalancer
    asserts:
      - equal:
          path: spec.type
          value: LoadBalancer
  - it: should be possible to configure only an internal Service
    set:
      service:
        enabled: false
        internal:
          type: LoadBalancer
    asserts:
      - equal:
          path: spec.type
          value: LoadBalancer
  - it: should fail when the name is too long
    release:
      name: yesthisnameiscontainingwaymorethan50charactersinit
    set:
      service:
        internal:
          type: ClusterIP
    asserts:
      - failedTemplate:
          errorMessage: "Cannot create an internal service when name contains more than 50 characters"
  - it: should have internal customized annotations when specified via values
    set:
      service:
        internal:
          annotations:
            azure-load-balancer-internal: true
    asserts:
      - equal:
          path: metadata.annotations.azure-load-balancer-internal
          value: true
  - it: should have customized labels when specified via values
    set:
      service:
        internal:
          labels:
            custom-label: custom-value
    asserts:
      - equal:
          path: metadata.labels.custom-label
          value: custom-value
  - it: should have custom spec elements when specified via values
    set:
      service:
        internal:
          enabled: true
          spec:
            externalTrafficPolicy: Cluster
            loadBalancerIP: "1.2.3.4"
            clusterIP: "2.3.4.5"
            loadBalancerSourceRanges:
              - 192.168.0.1/32
              - 172.16.0.0/16
            externalIPs:
              - "1.2.3.4"
    asserts:
      - equal:
          path: spec.ports[0].name
          value: web
      - equal:
          path: spec.ports[0].protocol
          value: TCP
      - equal:
          path: spec.externalTrafficPolicy
          value: Cluster
      - equal:
          path: spec.loadBalancerIP
          value: "1.2.3.4"
      - equal:
          path: spec.clusterIP
          value: "2.3.4.5"
      - equal:
          path: spec.loadBalancerSourceRanges[0]
          value: 192.168.0.1/32
      - equal:
          path: spec.loadBalancerSourceRanges[1]
          value: 172.16.0.0/16
      - equal:
          path: spec.externalIPs[0]
          value: "1.2.3.4"
  - it: should use helm managed namespace as default behavior UDP
    set:
      service:
        internal:
          enabled: true
          spec:
            externalTrafficPolicy: Cluster
            loadBalancerIP: "1.2.3.4"
            clusterIP: "2.3.4.5"
            loadBalancerSourceRanges:
              - 192.168.0.1/32
              - 172.16.0.0/16
            externalIPs:
              - "1.2.3.4"
      ports:
        udp:
          port: 3000
          protocol: UDP
    asserts:
      - equal:
          path: metadata.namespace
          value: NAMESPACE
  - it: should use helm managed namespace as default behavior TCP
    set:
      service:
        internal:
          enabled: true
          spec:
            externalTrafficPolicy: Cluster
            loadBalancerIP: "1.2.3.4"
            clusterIP: "2.3.4.5"
            loadBalancerSourceRanges:
              - 192.168.0.1/32
              - 172.16.0.0/16
            externalIPs:
              - "1.2.3.4"
      ports:
        tcp:
          port: 3000
          protocol: TCP
    asserts:
      - equal:
          path: metadata.namespace
          value: NAMESPACE
  - it: should accept overridden namespace UDP
    set:
      namespaceOverride: "traefik-ns-override"
      service:
        internal:
          enabled: true
          spec:
            externalTrafficPolicy: Cluster
            loadBalancerIP: "1.2.3.4"
            clusterIP: "2.3.4.5"
            loadBalancerSourceRanges:
              - 192.168.0.1/32
              - 172.16.0.0/16
            externalIPs:
              - "1.2.3.4"
      ports:
        udp:
          port: 3000
          protocol: UDP
    asserts:
      - equal:
          path: metadata.namespace
          value: "traefik-ns-override"
  - it: should accept overridden namespace TCP
    set:
      namespaceOverride: "traefik-ns-override"
      service:
        internal:
          enabled: true
          spec:
            externalTrafficPolicy: Cluster
            loadBalancerIP: "1.2.3.4"
            clusterIP: "2.3.4.5"
            loadBalancerSourceRanges:
              - 192.168.0.1/32
              - 172.16.0.0/16
            externalIPs:
              - "1.2.3.4"
      ports:
        tcp:
          port: 3000
          protocol: TCP
    asserts:
      - equal:
          path: metadata.namespace
          value: "traefik-ns-override"
